//
// This is the template for Part 2 of Lab 7.
//
// Paul Chow
// November 2021
//

module part2(iResetn,iPlotBox,iBlack,iColour,iLoadX,iXY_Coord,iClock,oX,oY,oColour,oPlot);
   
   parameter X_SCREEN_PIXELS = 8'd160;
   parameter Y_SCREEN_PIXELS = 7'd120;
   input wire iResetn, iPlotBox, iBlack, iLoadX;
   input wire [2:0] iColour;
   input wire [6:0] iXY_Coord;
   input wire 	    iClock;
   output wire [7:0] oX;         // VGA pixel coordinates
   output wire [6:0] oY;
   
   output wire [2:0] oColour;     // VGA pixel colour (0-7)
   output wire 	     oPlot;       // Pixel draw enable

/**********************************************************************/
    // lots of wires to connect our datapath and control
    wire Control_A, Control_B, Control_C,flage,black_en;
    

    control control(
     .clk(iClock),
     .resetn(iResetn),
     .iPlotBox(iPlotBox),
	  .iBlack(iBlack), 
	  .iLoadX(iLoadX),
     .black_en(black_en),
     .Control_A(Control_A), 
	  .Control_B(Control_B), 
	  .Control_C (Control_C),
	  .oPlot(oPlot),
	  .flage(flage)
    );

    datapath datapath(
     .clk(iClock),
     .resetn(iResetn),
     .iColour(iColour),
     .iXY_Coord(iXY_Coord),
	  .Control_A(Control_A),
	  .Control_B(Control_B),
	  .Control_C(Control_C),
     .flage(flage),
	  .black_en(black_en),
     .oX(oX),
	  .oY(oY),
	  .oColour(oColour)
    );
                
endmodule             
                

module control(
    input clk,
    input resetn,
    input iPlotBox,
	 input iBlack, 
	 input iLoadX,

    output reg  Control_A, 
	 output reg  Control_B, 
	 output reg Control_C ,
	 output reg oPlot,
	 output reg flage,
	 output reg black_en
    );

    reg [5:0] current_state, next_state; 
    
    localparam  IDLE        = 5'd0,
                iLoadX_H0   = 5'd1,
                iLoadX_L0        = 5'd2,
                iLoadX_H1   = 5'd3,
                iLoadX_L1        = 5'd4,
                iPlotBox_H   = 5'd5,
                iPlotBox_L        = 5'd6,
                iBlack_H   = 5'd7,
                iBlack_L       = 5'd8;

    always@(*)
    begin: state_table 
            case (current_state)
                IDLE: begin
								if(iLoadX==1'b1)
								   next_state = iLoadX_H0; 
								else if(iBlack==1'b1)
									next_state = iBlack_H; 
								else  
									next_state = IDLE; 
							 end
                iLoadX_H0: begin
										if(iLoadX==1'b0)
											next_state = iLoadX_L0; 
										else if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = iLoadX_H0; 
									 end
                iLoadX_L0: begin
										if(iLoadX==1'b0)
											next_state = iLoadX_H1; 
										else if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = iLoadX_L0; 
									 end
                iLoadX_H1: begin
										if(iLoadX==1'b0)
											next_state = iLoadX_L1; 
										else if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = iLoadX_H1; 
									 end
                iLoadX_L1: begin
										if(iPlotBox==1'b1)
											next_state = iPlotBox_H; 
										else if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = iLoadX_L1; 
									 end
                iPlotBox_H: begin
										if(iPlotBox==1'b0)
											next_state = iPlotBox_L; 
										else if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = iPlotBox_H; 
									 end
                iPlotBox_L: begin
										if(iBlack==1'b1)
											next_state = iBlack_H; 
										else  
											next_state = IDLE; 
									 end
                iBlack_H: begin
										if(iBlack==1'b0)
											next_state = iBlack_L; 
										else  
											next_state = iBlack_H; 
									 end
                iBlack_L: next_state = IDLE;
            default:     next_state = IDLE;
        endcase
    end 
	 
	
   always@(posedge clk)
	 if(!resetn)
            begin
						Control_A<=1'b0;
						Control_B<=1'b0;
						Control_C<=1'b0;
						oPlot<=1'b0;
						flage<=1'b0;
						black_en<=1'b0;
            end
	 else 
    begin 
         case (next_state)
            IDLE:    begin
									Control_A<=Control_A;
									Control_B<=Control_B;
									Control_C<=Control_C;
									oPlot<=oPlot;
									flage<=1'b0;
									black_en<=1'b0;
							end
            iLoadX_H0: begin
								   Control_A<=1'b0;
									Control_B<=1'b0;
									Control_C<=1'b1;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							  end
            iLoadX_L0: begin         //x
									Control_A<=1'b0;
									Control_B<=1'b0;
									Control_C<=1'b1;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							 end
            iLoadX_H1: begin
									Control_A<=1'b0;
									Control_B<=1'b1;
									Control_C<=1'b0;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							  end
            iLoadX_L1: begin       //y
									Control_A<=1'b0;
									Control_B<=1'b1;
									Control_C<=1'b0;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							end
				iPlotBox_H: begin
									Control_A<=1'b0;
									Control_B<=1'b1;
									Control_C<=1'b0;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							   end
				iPlotBox_L:begin      //plot
									Control_A<=1'b0;
									Control_B<=1'b1;
									Control_C<=1'b1;
									oPlot<=1'b1;
									flage<=1'b1;
									black_en<=1'b0;
							  end
            iBlack_H: begin
									Control_A<=1'b1;
									Control_B<=1'b0;
									Control_C<=1'b0;
									oPlot<=1'b0;
									flage<=1'b0;
									black_en<=1'b0;
							 end
				iBlack_L: begin    //black
									Control_A<=1'b1;
									Control_B<=1'b1;
									Control_C<=1'b1;
									oPlot<=oPlot;
									flage<=1'b1;
									black_en<=1'b1;
							end
            default:  begin
									Control_A<=1'b0;
									Control_B<=1'b0;
									Control_C<=1'b0;
									oPlot<=1'b0;
									black_en<=1'b0;
							end
			 endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin 
        if(!resetn)
            current_state <= IDLE;
        else
            current_state <= next_state;
    end // state_FFS
endmodule

module datapath(
    input clk,
    input resetn,
    input [2:0] iColour,
    input [6:0] iXY_Coord,
	 input Control_A,
	 input Control_B,
	 input Control_C,
    input flage,
	 input black_en,
    output reg [7:0] oX,
	 output reg [6:0] oY,
	 output reg[2:0] oColour
    );
    reg [7:0] oX_r;
	 reg [6:0] oY_r;
	 reg  plot_en;
    always@(posedge clk) begin
      if(!resetn)
		begin
				oX_r <= 8'd0; 
				oY_r <= 7'd0;
				plot_en<=1'b0;
				
		end
		else
		begin
            case ({Control_A,Control_B,Control_C})
            3'b000:    begin
									oX_r <= oX_r; 
									oY_r <= oY_r;
									plot_en<=1'b0;
									
							 end
            3'b001: begin      //x
								   oX_r <= {1'b0,iXY_Coord[6:0]}; 
									oY_r <= 7'd0;
									plot_en<=1'b0;
									
							end
            3'b010: begin         //y
									oX_r <= oX_r; 
									oY_r <= iXY_Coord; 
									plot_en<=1'b0;
									
							 end
            3'b011: begin    //plot
								oX_r <= oX_r; 
								oY_r <= iXY_Coord; 
							    plot_en<=1'b1;	
								
							end
            3'b100: begin       //black
									oX_r <= oX_r; 
									oY_r <= oY_r; 
									plot_en<=1'b1;	
									
							end
				3'b111: begin       //black
									oX_r <= oX_r; 
									oY_r <= oY_r; 
									plot_en<=plot_en;	
									
							end
            default:  begin
									oX_r <= 8'd0; 
									oY_r <= 7'd0; 
									plot_en<=1'b0;
									
							end
			 endcase
      end  
    end
 
    //X
    always@(posedge clk) begin
        if(!resetn) 
		begin
           oX <= 8'd0;
		   oColour<=3'd5;
		end 
		else if(black_en)
		begin
				  oColour<=3'd0;
				  oX <= oX_r;
		end
       else if(flage)
		begin 
			oX <= oX_r;
			oColour<=iColour;
		end
		else if((oX == oX_r+2'd3) && (oY == oY_r+2'd3))
		oX <= oX;
		else if(oX == oX_r+2'd3)
				oX <= oX_r;
		else if(plot_en)
		begin
				oX <= oX + 8'd1;
				 
		end
		else 
		  begin
				oX <= 8'd0;
		  end
    end
  //y
	always@(posedge clk) begin
    if(!resetn) 
      oY <= 7'd0;
	else if(black_en)
	begin
		oY<= oY_r;
	end
	else if(flage)	
		oY <= oY_r;
	else if((oX == oX_r+2'd3) && (oY == oY_r+2'd3))
		oY <= oY;
	else if((oX == oX_r+2'd3)&(plot_en))
		oY <= oY + 7'd1;
	else if(plot_en)
		oY <=oY;
	else 
		 oY <= 7'd0;
   end
//assign oColour=black_en? 3'd0:((oX >= oX_r)&&(oX <= oX_r+2'd3)&&(oY >= oY_r)&&(oY <= oY_r+2'd3)&&(plot_en))? iColour:3'd3;
    
endmodule

